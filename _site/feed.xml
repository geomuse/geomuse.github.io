<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-16T16:31:56+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">g</title><subtitle>stay hungry, stay foolish</subtitle><entry><title type="html">challenge-25/30-Flask-Mail</title><link href="http://localhost:4000/python/flask/challenge/flask_mail/" rel="alternate" type="text/html" title="challenge-25/30-Flask-Mail" /><published>2024-09-16T11:24:29+08:00</published><updated>2024-09-16T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_mail</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_mail/"><![CDATA[<p>要使用 Flask-Mail 发送邮件，你可以按照以下步骤来安装并配置 Flask-Mail 扩展，并学习如何发送邮件：</p>

<h3 id="1-安装-flask-mail">1. 安装 Flask-Mail</h3>
<p>首先，在你的虚拟环境中安装 <code class="language-plaintext highlighter-rouge">Flask-Mail</code> 扩展：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>Flask-Mail
</code></pre></div></div>

<h3 id="2-配置-flask-mail">2. 配置 Flask-Mail</h3>
<p>在 Flask 应用中，配置邮件服务器的相关参数。常见的邮件服务提供商有 Gmail、Yahoo、Outlook 等。以 Gmail 为例，你需要在 <code class="language-plaintext highlighter-rouge">config.py</code> 中添加以下配置：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># config.py
</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="k">class</span> <span class="nc">Config</span><span class="p">:</span>
    <span class="n">MAIL_SERVER</span> <span class="o">=</span> <span class="sh">'</span><span class="s">smtp.gmail.com</span><span class="sh">'</span>  <span class="c1"># 邮件服务器地址
</span>    <span class="n">MAIL_PORT</span> <span class="o">=</span> <span class="mi">587</span>  <span class="c1"># 端口号
</span>    <span class="n">MAIL_USE_TLS</span> <span class="o">=</span> <span class="bp">True</span>  <span class="c1"># 启用TLS
</span>    <span class="n">MAIL_USERNAME</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">MAIL_USERNAME</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 发件人邮箱
</span>    <span class="n">MAIL_PASSWORD</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">MAIL_PASSWORD</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 发件人邮箱的密码或App密码
</span>    <span class="n">MAIL_DEFAULT_SENDER</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">'</span><span class="s">MAIL_DEFAULT_SENDER</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 默认发件人
</span></code></pre></div></div>

<p>确保你在 <code class="language-plaintext highlighter-rouge">.env</code> 文件或环境变量中设置 <code class="language-plaintext highlighter-rouge">MAIL_USERNAME</code>, <code class="language-plaintext highlighter-rouge">MAIL_PASSWORD</code>, 和 <code class="language-plaintext highlighter-rouge">MAIL_DEFAULT_SENDER</code>：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># .env</span>
<span class="nv">MAIL_USERNAME</span><span class="o">=</span><span class="s1">'your-email@gmail.com'</span>
<span class="nv">MAIL_PASSWORD</span><span class="o">=</span><span class="s1">'your-email-password'</span>  <span class="c"># 使用应用专用密码</span>
<span class="nv">MAIL_DEFAULT_SENDER</span><span class="o">=</span><span class="s1">'your-email@gmail.com'</span>
</code></pre></div></div>

<h3 id="3-初始化-flask-mail">3. 初始化 Flask-Mail</h3>

<p>在你的 Flask 应用中初始化 Flask-Mail 扩展：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="kn">from</span> <span class="n">flask_mail</span> <span class="kn">import</span> <span class="n">Mail</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">from_object</span><span class="p">(</span><span class="sh">'</span><span class="s">config.Config</span><span class="sh">'</span><span class="p">)</span>  <span class="c1"># 从配置文件加载配置
</span>
<span class="n">mail</span> <span class="o">=</span> <span class="nc">Mail</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>  <span class="c1"># 初始化 Flask-Mail
</span></code></pre></div></div>

<h3 id="4-发送邮件">4. 发送邮件</h3>
<p>你可以通过 <code class="language-plaintext highlighter-rouge">Message</code> 类来构建邮件，并通过 <code class="language-plaintext highlighter-rouge">mail.send()</code> 发送邮件。下面是一个发送简单邮件的示例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask_mail</span> <span class="kn">import</span> <span class="n">Message</span>
<span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span>

<span class="c1"># 发送邮件的函数
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/send_email</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">send_email</span><span class="p">():</span>
    <span class="n">msg</span> <span class="o">=</span> <span class="nc">Message</span><span class="p">(</span><span class="sh">'</span><span class="s">Hello from Flask-Mail</span><span class="sh">'</span><span class="p">,</span>  <span class="c1"># 主题
</span>                  <span class="n">recipients</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">recipient@example.com</span><span class="sh">'</span><span class="p">])</span>  <span class="c1"># 收件人
</span>    <span class="n">msg</span><span class="p">.</span><span class="n">body</span> <span class="o">=</span> <span class="sh">'</span><span class="s">This is a test email sent from Flask-Mail.</span><span class="sh">'</span>  <span class="c1"># 邮件正文
</span>    <span class="n">msg</span><span class="p">.</span><span class="n">html</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&lt;h1&gt;This is a test email sent from Flask-Mail&lt;/h1&gt;</span><span class="sh">'</span>  <span class="c1"># HTML格式的正文
</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">mail</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">msg</span><span class="p">)</span>  <span class="c1"># 发送邮件
</span>        <span class="k">return</span> <span class="sh">"</span><span class="s">Email sent successfully!</span><span class="sh">"</span>
    <span class="k">except</span> <span class="nb">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Failed to send email: </span><span class="si">{</span><span class="nf">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span><span class="si">}</span><span class="sh">"</span>
</code></pre></div></div>

<h3 id="5-测试邮件发送">5. 测试邮件发送</h3>
<p>运行 Flask 应用，然后访问 <code class="language-plaintext highlighter-rouge">/send_email</code> 路径，就会发送测试邮件。确认你在控制台没有错误，并检查收件箱是否成功收到邮件。</p>

<h3 id="注意事项">注意事项</h3>
<ol>
  <li><strong>Gmail 安全性问题</strong>：如果你使用的是 Gmail，请确保在 Gmail 账户中启用了 <a href="https://support.google.com/accounts/answer/185833?hl=en">应用专用密码</a>，并在配置中使用此密码而不是普通登录密码。</li>
  <li><strong>调试</strong>：可以在开发环境中设置 <code class="language-plaintext highlighter-rouge">MAIL_DEBUG = True</code> 以便调试信息输出到控制台。</li>
</ol>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[要使用 Flask-Mail 发送邮件，你可以按照以下步骤来安装并配置 Flask-Mail 扩展，并学习如何发送邮件：]]></summary></entry><entry><title type="html">challenge-25/30-Flask-Mail</title><link href="http://localhost:4000/python/flask/challenge/flask_mail/" rel="alternate" type="text/html" title="challenge-25/30-Flask-Mail" /><published>2024-09-16T11:24:29+08:00</published><updated>2024-09-16T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_mail</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_mail/"><![CDATA[<p>Flask-Mail 与 Python 内置的发送邮件套件（如 <code class="language-plaintext highlighter-rouge">smtplib</code>）在功能和使用上有一些区别，主要体现在封装、功能集成以及开发者体验等方面。以下是两者的主要区别：</p>

<h3 id="1-封装和简化">1. <strong>封装和简化</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: Flask-Mail 是针对 Flask 框架开发的一个扩展库，它封装了邮件发送的流程，提供了一个高层次的接口。你只需要通过配置和简单的 API 调用，就可以轻松地发送邮件。它与 Flask 框架的配置管理系统无缝集成，支持异步邮件发送以及与模板引擎集成。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: Python 的 <code class="language-plaintext highlighter-rouge">smtplib</code> 是一个底层的邮件发送库，提供了直接与 SMTP 服务器通信的能力。开发者需要手动处理服务器连接、登录、邮件构造和发送等细节。这更灵活，但相对繁琐，尤其是在需要管理多个配置项时。</li>
</ul>

<h3 id="2-功能集成">2. <strong>功能集成</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: 集成了 Flask 框架的配置系统，支持自动从配置文件中读取邮件服务器相关的配置项。它还可以与 Flask 的模板系统（如 Jinja2）结合，方便地生成 HTML 格式的邮件内容。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: <code class="language-plaintext highlighter-rouge">smtplib</code> 是 Python 内置的库，虽然功能强大，但只提供最基础的 SMTP 功能。你需要手动编写代码来处理附件、HTML 邮件以及其他复杂的邮件结构。同时，如果你需要结合 Flask 的配置和模板引擎，需要额外的代码来集成。</li>
</ul>

<h3 id="3-配置管理">3. <strong>配置管理</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: 使用 Flask 框架的配置系统，所有邮件相关的配置（如服务器、端口、发件人、登录凭据等）都可以集中在 Flask 的配置文件中，简化了管理过程。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: 你需要手动处理所有配置项，并且在每次发送邮件时，可能都需要重新指定服务器、端口和其他相关参数。没有 Flask 的配置管理优势。</li>
</ul>

<h3 id="4-邮件发送的异步支持">4. <strong>邮件发送的异步支持</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: 可以轻松与异步任务队列（如 Celery）集成，允许在后台发送邮件，而不阻塞 Flask 应用的主线程。通过 Flask-Mail 的支持，异步发送邮件非常简单。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: Python 自带的 <code class="language-plaintext highlighter-rouge">smtplib</code> 没有直接的异步功能。如果要实现异步发送邮件，通常需要自行编写多线程或多进程的代码，或者结合其他异步任务库，如 <code class="language-plaintext highlighter-rouge">concurrent.futures</code> 或 <code class="language-plaintext highlighter-rouge">asyncio</code>。</li>
</ul>

<h3 id="5-发送-html-邮件和附件">5. <strong>发送 HTML 邮件和附件</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: 简化了发送 HTML 邮件、纯文本邮件以及附件的过程。它的 <code class="language-plaintext highlighter-rouge">Message</code> 类封装了这些功能，使得发送带有 HTML 内容或附件的邮件变得很容易。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: 虽然 <code class="language-plaintext highlighter-rouge">smtplib</code> 也可以发送 HTML 邮件和附件，但你需要手动使用 <code class="language-plaintext highlighter-rouge">MIMEText</code>、<code class="language-plaintext highlighter-rouge">MIMEMultipart</code> 等类来构建复杂的邮件结构，代码量较大且容易出错。</li>
</ul>

<h3 id="6-错误处理">6. <strong>错误处理</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: 提供了简单的异常处理机制，并且与 Flask 的日志和错误处理系统集成。在 Flask 应用中，出错时会有较好的调试信息输出。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: <code class="language-plaintext highlighter-rouge">smtplib</code> 是一个底层库，错误处理相对较基础，开发者需要手动捕获和处理异常。如果出错，调试信息也相对有限。</li>
</ul>

<h3 id="7-适用场景">7. <strong>适用场景</strong></h3>
<ul>
  <li><strong>Flask-Mail</strong>: 如果你正在开发基于 Flask 的 Web 应用，且需要频繁发送邮件，那么 Flask-Mail 是一个更为方便的选择。它能够很好地集成到 Flask 框架中，极大简化了邮件的发送流程。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong>: 如果你在编写与 Flask 无关的 Python 脚本或服务，或者你需要更灵活、更底层的邮件发送控制，<code class="language-plaintext highlighter-rouge">smtplib</code> 可能更适合这种场景。</li>
</ul>

<h3 id="示例对比">示例对比</h3>

<ul>
  <li><strong>Flask-Mail</strong> 示例：
```python
from flask import Flask
from flask_mail import Mail, Message</li>
</ul>

<p>app = Flask(<strong>name</strong>)
app.config.update(
    MAIL_SERVER=’smtp.example.com’,
    MAIL_PORT=587,
    MAIL_USE_TLS=True,
    MAIL_USERNAME=’your-email@example.com’,
    MAIL_PASSWORD=’your-password’
)
mail = Mail(app)</p>

<p>@app.route(‘/send_mail’)
def send_mail():
    msg = Message(“Hello”,
                  recipients=[“to@example.com”],
                  body=”This is the email body.”)
    mail.send(msg)
    return “Mail sent!”</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
- **`smtplib`** 示例：
```python
import smtplib
from email.mime.text import MIMEText

def send_mail():
    msg = MIMEText("This is the email body.")
    msg["Subject"] = "Hello"
    msg["From"] = "your-email@example.com"
    msg["To"] = "to@example.com"

    with smtplib.SMTP("smtp.example.com", 587) as server:
        server.starttls()
        server.login("your-email@example.com", "your-password")
        server.send_message(msg)

send_mail()
</code></pre></div></div>

<h3 id="总结">总结</h3>
<ul>
  <li><strong>Flask-Mail</strong> 更加方便和集成，适合 Flask 应用开发，特别是当你需要邮件发送与应用逻辑紧密集成时。</li>
  <li><strong><code class="language-plaintext highlighter-rouge">smtplib</code></strong> 更加底层、灵活，但需要编写更多的代码和手动处理邮件的复杂性，适合更通用的邮件发送场景。</li>
</ul>

<p>如果你正在开发 Flask 应用，使用 Flask-Mail 会让邮件发送更加高效和简便。</p>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[Flask-Mail 与 Python 内置的发送邮件套件（如 smtplib）在功能和使用上有一些区别，主要体现在封装、功能集成以及开发者体验等方面。以下是两者的主要区别：]]></summary></entry><entry><title type="html">challenge-20/30-日志记录与调试</title><link href="http://localhost:4000/python/flask/challenge/flask_log/" rel="alternate" type="text/html" title="challenge-20/30-日志记录与调试" /><published>2024-09-16T11:24:29+08:00</published><updated>2024-09-16T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_log</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_log/"><![CDATA[<p><code class="language-plaintext highlighter-rouge">Loguru</code> 是一个功能强大且易于使用的日志记录库，它比标准的 Python <code class="language-plaintext highlighter-rouge">logging</code> 模块提供了更多特性，如简单的语法、格式化日志、文件轮转等。以下是如何将 Flask 的日志系统修改为使用 <code class="language-plaintext highlighter-rouge">Loguru</code> 的方法。</p>

<h3 id="1-安装-loguru">1. <strong>安装 Loguru</strong></h3>
<p>首先，你需要安装 <code class="language-plaintext highlighter-rouge">Loguru</code> 库：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>loguru
</code></pre></div></div>

<h3 id="2-在-flask-中使用-loguru">2. <strong>在 Flask 中使用 Loguru</strong></h3>
<p><code class="language-plaintext highlighter-rouge">Loguru</code> 的使用非常简单，你可以通过 <code class="language-plaintext highlighter-rouge">logger</code> 来替代 Flask 默认的日志系统。下面是一个使用 <code class="language-plaintext highlighter-rouge">Loguru</code> 的基本示例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="kn">from</span> <span class="n">loguru</span> <span class="kn">import</span> <span class="n">logger</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c1"># 使用 Loguru 的 logger 替代默认的 Flask 日志记录器
</span><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">{time} {level} {message}</span><span class="sh">"</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="sh">"</span><span class="s">DEBUG</span><span class="sh">"</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="sh">"</span><span class="s">10 MB</span><span class="sh">"</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Serving the index page with Loguru.</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">debug</span><span class="p">(</span><span class="sh">"</span><span class="s">Debugging the index page.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Hello, Flask with Loguru!</span><span class="sh">"</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="3-详细设置-loguru">3. <strong>详细设置 Loguru</strong></h3>
<p>你可以配置 <code class="language-plaintext highlighter-rouge">Loguru</code> 记录到文件、控制台或其它目标，支持日志轮转和压缩等功能。</p>

<h4 id="31-日志轮转与文件压缩">3.1 日志轮转与文件压缩</h4>
<p>你可以让 <code class="language-plaintext highlighter-rouge">Loguru</code> 在日志文件达到一定大小时自动轮转，并压缩旧的日志文件：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">loguru</span> <span class="kn">import</span> <span class="n">logger</span>

<span class="c1"># 日志记录到文件，设置轮转和压缩
</span><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">{time} {level} {message}</span><span class="sh">"</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="sh">"</span><span class="s">INFO</span><span class="sh">"</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="sh">"</span><span class="s">10 MB</span><span class="sh">"</span><span class="p">,</span> <span class="n">compression</span><span class="o">=</span><span class="sh">"</span><span class="s">zip</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="32-自定义日志格式">3.2 自定义日志格式</h4>
<p>你可以定制日志输出格式，包含时间戳、日志级别、调用位置等信息：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span><span class="p">,</span> 
           <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">{time:YYYY-MM-DD at HH:mm:ss} | {level} | {module}:{function}:{line} - {message}</span><span class="sh">"</span><span class="p">,</span> 
           <span class="n">level</span><span class="o">=</span><span class="sh">"</span><span class="s">DEBUG</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>在这个示例中，日志格式包含了日期时间、日志级别、调用模块、函数名和行号。</p>

<h3 id="4-替换-flask-内置日志记录器">4. <strong>替换 Flask 内置日志记录器</strong></h3>
<p>为了让 <code class="language-plaintext highlighter-rouge">Loguru</code> 完全取代 Flask 默认的日志记录器，你可以在 Flask 应用启动时，移除 Flask 内置的 <code class="language-plaintext highlighter-rouge">app.logger</code>，并将 <code class="language-plaintext highlighter-rouge">Loguru</code> 的 logger 绑定到 Flask：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="kn">from</span> <span class="n">loguru</span> <span class="kn">import</span> <span class="n">logger</span>
<span class="kn">import</span> <span class="n">sys</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c1"># 移除 Flask 自带的日志记录器
</span><span class="n">app</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">handlers</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># 将 Loguru logger 添加到 stdout，类似于 Flask 默认行为
</span><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">{time} {level} {message}</span><span class="sh">"</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="sh">"</span><span class="s">DEBUG</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># 记录到文件
</span><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">{time:YYYY-MM-DD HH:mm:ss} | {level} | {message}</span><span class="sh">"</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="sh">"</span><span class="s">10 MB</span><span class="sh">"</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="sh">"</span><span class="s">Index page served.</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Hello, Flask with Loguru!</span><span class="sh">"</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="5-设置异步日志">5. <strong>设置异步日志</strong></h3>
<p>Loguru 还支持异步日志，适合在高并发环境中使用。你可以使用 <code class="language-plaintext highlighter-rouge">enqueue=True</code> 参数来开启异步日志：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sh">"</span><span class="s">app.log</span><span class="sh">"</span><span class="p">,</span> <span class="nb">format</span><span class="o">=</span><span class="sh">"</span><span class="s">{time} {level} {message}</span><span class="sh">"</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="sh">"</span><span class="s">INFO</span><span class="sh">"</span><span class="p">,</span> <span class="n">enqueue</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="6-日志过滤">6. <strong>日志过滤</strong></h3>
<p>你可以根据模块或其他条件过滤日志输出。例如，只记录与某个模块相关的日志：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">logger</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="sh">"</span><span class="s">filtered.log</span><span class="sh">"</span><span class="p">,</span> <span class="nb">filter</span><span class="o">=</span><span class="sh">"</span><span class="s">my_module</span><span class="sh">"</span><span class="p">,</span> <span class="n">level</span><span class="o">=</span><span class="sh">"</span><span class="s">INFO</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="总结">总结</h3>

<p><code class="language-plaintext highlighter-rouge">Loguru</code> 提供了简洁、灵活且功能强大的日志记录方式，并且相比传统的 <code class="language-plaintext highlighter-rouge">logging</code> 模块更加直观。在 Flask 项目中使用 <code class="language-plaintext highlighter-rouge">Loguru</code> 可以带来更好的日志管理体验，包括日志轮转、格式化、文件压缩等功能。通过这些设置，你可以将 <code class="language-plaintext highlighter-rouge">Loguru</code> 无缝集成到 Flask 项目中，替代原有的日志系统。</p>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[Loguru 是一个功能强大且易于使用的日志记录库，它比标准的 Python logging 模块提供了更多特性，如简单的语法、格式化日志、文件轮转等。以下是如何将 Flask 的日志系统修改为使用 Loguru 的方法。]]></summary></entry><entry><title type="html">challenge-11/30-Flask-Login 用户认证</title><link href="http://localhost:4000/python/flask/challenge/flask_Login_%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/" rel="alternate" type="text/html" title="challenge-11/30-Flask-Login 用户认证" /><published>2024-09-15T11:24:29+08:00</published><updated>2024-09-15T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_Login_%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_Login_%E7%94%A8%E6%88%B7%E8%AE%A4%E8%AF%81/"><![CDATA[<p>Flask-Login 是一个非常流行的 Flask 扩展，专门用于用户认证和管理用户登录状态。下面是一个基本的指南，帮助你学习如何使用 Flask-Login 实现用户登录、登出和访问保护。</p>

<h3 id="步骤-1安装-flask-login">步骤 1：安装 Flask-Login</h3>
<p>你首先需要安装 Flask-Login 扩展，可以通过 pip 进行安装：</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>flask-login
</code></pre></div></div>

<h3 id="步骤-2设置-flask-应用">步骤 2：设置 Flask 应用</h3>

<ol>
  <li>
    <p><strong>创建 Flask 应用</strong>
你需要创建一个基本的 Flask 应用程序结构，确保应用有用户注册、登录和登出功能。</p>
  </li>
  <li>
    <p><strong>设置 User 模型</strong>
Flask-Login 需要一个 <code class="language-plaintext highlighter-rouge">User</code> 类或模型来管理用户数据。该类需要实现一些必要的方法，如 <code class="language-plaintext highlighter-rouge">is_authenticated</code>、<code class="language-plaintext highlighter-rouge">is_active</code>、<code class="language-plaintext highlighter-rouge">is_anonymous</code> 和 <code class="language-plaintext highlighter-rouge">get_id</code>。通常，这个类会对应到你的用户数据库模型。</p>
  </li>
</ol>

<h3 id="步骤-3基本的-flask-login-设置">步骤 3：基本的 Flask-Login 设置</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">render_template</span><span class="p">,</span> <span class="n">redirect</span><span class="p">,</span> <span class="n">url_for</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">from</span> <span class="n">flask_login</span> <span class="kn">import</span> <span class="n">LoginManager</span><span class="p">,</span> <span class="n">UserMixin</span><span class="p">,</span> <span class="n">login_user</span><span class="p">,</span> <span class="n">login_required</span><span class="p">,</span> <span class="n">logout_user</span><span class="p">,</span> <span class="n">current_user</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">secret_key</span> <span class="o">=</span> <span class="sh">'</span><span class="s">your_secret_key</span><span class="sh">'</span>  <span class="c1"># 用于保护 session
</span>
<span class="c1"># Flask-Login 初始化
</span><span class="n">login_manager</span> <span class="o">=</span> <span class="nc">LoginManager</span><span class="p">()</span>
<span class="n">login_manager</span><span class="p">.</span><span class="nf">init_app</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>

<span class="c1"># 登录视图，如果用户没有登录，会重定向到此
</span><span class="n">login_manager</span><span class="p">.</span><span class="n">login_view</span> <span class="o">=</span> <span class="sh">'</span><span class="s">login</span><span class="sh">'</span>


<span class="c1"># 用户类，继承 UserMixin，包含 Flask-Login 需要的属性和方法
</span><span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">UserMixin</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="nb">id</span> <span class="o">=</span> <span class="nb">id</span>
        <span class="n">self</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">username</span>
        <span class="n">self</span><span class="p">.</span><span class="n">password</span> <span class="o">=</span> <span class="n">password</span>

<span class="c1"># 模拟用户数据库
</span><span class="n">users</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">user1</span><span class="sh">'</span><span class="p">:</span> <span class="nc">User</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">user1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">password1</span><span class="sh">'</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">user2</span><span class="sh">'</span><span class="p">:</span> <span class="nc">User</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="sh">'</span><span class="s">user2</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">password2</span><span class="sh">'</span><span class="p">)</span>
<span class="p">}</span>


<span class="c1"># 加载用户的回调函数
</span><span class="nd">@login_manager.user_loader</span>
<span class="k">def</span> <span class="nf">load_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">.</span><span class="nf">values</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">user</span><span class="p">.</span><span class="nb">id</span> <span class="o">==</span> <span class="nf">int</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
            <span class="k">return</span> <span class="n">user</span>
    <span class="k">return</span> <span class="bp">None</span>

<span class="c1"># 登录路由
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/login</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">login</span><span class="p">():</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
        <span class="n">password</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">password</span><span class="sh">'</span><span class="p">]</span>
        
        <span class="c1"># 检查用户是否在数据库中
</span>        <span class="n">user</span> <span class="o">=</span> <span class="n">users</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">username</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">user</span> <span class="ow">and</span> <span class="n">user</span><span class="p">.</span><span class="n">password</span> <span class="o">==</span> <span class="n">password</span><span class="p">:</span>
            <span class="nf">login_user</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>  <span class="c1"># 使用 login_user() 方法登录用户
</span>            <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="nf">url_for</span><span class="p">(</span><span class="sh">'</span><span class="s">protected</span><span class="sh">'</span><span class="p">))</span>
        <span class="k">return</span> <span class="sh">'</span><span class="s">Invalid username or password</span><span class="sh">'</span>
    
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">login.html</span><span class="sh">'</span><span class="p">)</span>


<span class="c1"># 受保护的路由，只有登录后才能访问
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/protected</span><span class="sh">'</span><span class="p">)</span>
<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">protected</span><span class="p">():</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">'</span><span class="s">Hello, </span><span class="si">{</span><span class="n">current_user</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">! You are logged in.</span><span class="sh">'</span>

<span class="c1"># 登出路由
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/logout</span><span class="sh">'</span><span class="p">)</span>
<span class="nd">@login_required</span>
<span class="k">def</span> <span class="nf">logout</span><span class="p">():</span>
    <span class="nf">logout_user</span><span class="p">()</span>  <span class="c1"># 使用 logout_user() 方法登出用户
</span>    <span class="k">return</span> <span class="nf">redirect</span><span class="p">(</span><span class="nf">url_for</span><span class="p">(</span><span class="sh">'</span><span class="s">login</span><span class="sh">'</span><span class="p">))</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="解释">解释：</h3>

<ol>
  <li>
    <p><strong>LoginManager 初始化</strong>：<code class="language-plaintext highlighter-rouge">LoginManager</code> 是 Flask-Login 的核心，它会管理用户的登录状态。<code class="language-plaintext highlighter-rouge">login_view</code> 用于定义用户未登录时重定向的视图。</p>
  </li>
  <li>
    <p><strong>User 类</strong>：模拟了一个简单的用户类，它继承了 <code class="language-plaintext highlighter-rouge">UserMixin</code>，该类包含了 Flask-Login 要求的用户属性和方法。通常情况下，你会将此类替换为一个数据库模型类。</p>
  </li>
  <li>
    <p><strong>login_user() 和 logout_user()</strong>：<code class="language-plaintext highlighter-rouge">login_user(user)</code> 用于登录用户，<code class="language-plaintext highlighter-rouge">logout_user()</code> 用于登出用户。</p>
  </li>
  <li>
    <p><strong>@login_required</strong>：这个装饰器用于保护视图，只有登录的用户才能访问这些路由。</p>
  </li>
  <li>
    <p><strong>user_loader</strong>：<code class="language-plaintext highlighter-rouge">@login_manager.user_loader</code> 回调函数用来从数据库中加载用户，接受的参数是用户的 ID。</p>
  </li>
</ol>

<h3 id="步骤-4创建登录表单">步骤 4：创建登录表单</h3>

<p>你可以创建一个简单的 HTML 登录表单 <code class="language-plaintext highlighter-rouge">login.html</code>：</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">http-equiv=</span><span class="s">"X-UA-Compatible"</span> <span class="na">content=</span><span class="s">"IE=edge"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>Login<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;form</span> <span class="na">method=</span><span class="s">"POST"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"username"</span><span class="nt">&gt;</span>Username:<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"text"</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">id=</span><span class="s">"username"</span> <span class="na">required</span><span class="nt">&gt;&lt;br&gt;</span>
        <span class="nt">&lt;label</span> <span class="na">for=</span><span class="s">"password"</span><span class="nt">&gt;</span>Password:<span class="nt">&lt;/label&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"password"</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">id=</span><span class="s">"password"</span> <span class="na">required</span><span class="nt">&gt;&lt;br&gt;</span>
        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">"submit"</span> <span class="na">value=</span><span class="s">"Login"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;/form&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<h3 id="步骤-5保护路由">步骤 5：保护路由</h3>
<p>通过使用 <code class="language-plaintext highlighter-rouge">@login_required</code> 装饰器，可以轻松保护路由，使其只有在用户登录后才可以访问。如果用户未登录，系统会将其重定向到登录页面。</p>

<h3 id="总结">总结</h3>
<p>通过以上步骤，你已经成功实现了用户认证功能，包括登录、登出和保护路由。如果你有数据库支持，还可以将 <code class="language-plaintext highlighter-rouge">User</code> 类替换为数据库中的模型，并进行更复杂的用户管理。</p>

<p>你可以根据需求进一步扩展，比如增加密码哈希、用户注册、忘记密码等功能。</p>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[Flask-Login 是一个非常流行的 Flask 扩展，专门用于用户认证和管理用户登录状态。下面是一个基本的指南，帮助你学习如何使用 Flask-Login 实现用户登录、登出和访问保护。]]></summary></entry><entry><title type="html">books-逆商</title><link href="http://localhost:4000/review/review027/" rel="alternate" type="text/html" title="books-逆商" /><published>2024-09-14T11:24:29+08:00</published><updated>2024-09-14T11:24:29+08:00</updated><id>http://localhost:4000/review/review027</id><content type="html" xml:base="http://localhost:4000/review/review027/"><![CDATA[<h3 id="阅读书本前">阅读书本前</h3>

<p>在困难时期里可以承着压力来解决问题,创业需要这个能力</p>

<h3 id="书评">书评</h3>

<p>关于成功的定义应该是：不畏艰难险阻或其他逆境而努力前进和攀登，去履行一生的使命。</p>

<p>这些技巧称为LEAD工具。</p>

<p>L= Listen，倾听自己的逆境反应： 这是高逆商反应还是低逆商反应？ 在哪个维度得分最高或最低？</p>

<p>E= Explore，探究自己对结果的担当： 我应该对结果的哪些部分担起责任？ 我不应该对哪些部分担责？</p>

<p>A= Analyze，分析证据： 有什么证据可以表明我无法掌控？ 有什么证据可以表明此次困境一定会蔓延到生活的其他方面？ 有什么证据可以表明此次困境必然会持续过长时间。</p>

<p>D= Do，做点事情： 我还需要什么信息？ 我可以做什么来获得对形势的一点点掌控感？ 我可以做什么来限制困境的影响范围？ 我可以做什么来限制当前困境的持续时间？</p>

<p>LEAD工具是基于这样一种观点：我们可以通过改变思维习惯来改变成功率。这种改变是通过质疑以前的模式并有意识地构建新的模式来实现的。</p>

<p>如 :</p>

<p>护照和电话丢失在香港机场</p>

<p>E : 丢失护照和手机</p>

<p>A : 在哪里丢失同时应该怎么处理</p>

<p>Todo : (步骤)</p>

<ul>
  <li>询问柜台</li>
  <li>跟航空调解</li>
  <li>回去可能发生丢失的地点</li>
</ul>

<h3 id="评后感">评后感</h3>

<p>EAT 是我重构的想法,L(聆听)对于自己没有太大的价值</p>]]></content><author><name></name></author><category term="review" /><summary type="html"><![CDATA[阅读书本前 在困难时期里可以承着压力来解决问题,创业需要这个能力 书评 关于成功的定义应该是：不畏艰难险阻或其他逆境而努力前进和攀登，去履行一生的使命。 这些技巧称为LEAD工具。 L= Listen，倾听自己的逆境反应： 这是高逆商反应还是低逆商反应？ 在哪个维度得分最高或最低？ E= Explore，探究自己对结果的担当： 我应该对结果的哪些部分担起责任？ 我不应该对哪些部分担责？ A= Analyze，分析证据： 有什么证据可以表明我无法掌控？ 有什么证据可以表明此次困境一定会蔓延到生活的其他方面？ 有什么证据可以表明此次困境必然会持续过长时间。 D= Do，做点事情： 我还需要什么信息？ 我可以做什么来获得对形势的一点点掌控感？ 我可以做什么来限制困境的影响范围？ 我可以做什么来限制当前困境的持续时间？ LEAD工具是基于这样一种观点：我们可以通过改变思维习惯来改变成功率。这种改变是通过质疑以前的模式并有意识地构建新的模式来实现的。 如 : 护照和电话丢失在香港机场 E : 丢失护照和手机 A : 在哪里丢失同时应该怎么处理 Todo : (步骤) 询问柜台 跟航空调解 回去可能发生丢失的地点 评后感 EAT 是我重构的想法,L(聆听)对于自己没有太大的价值]]></summary></entry><entry><title type="html">challenge-09/30-flask 数据库操作（CRUD)</title><link href="http://localhost:4000/python/flask/challenge/flask_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C(CRUD)/" rel="alternate" type="text/html" title="challenge-09/30-flask 数据库操作（CRUD)" /><published>2024-09-13T11:24:29+08:00</published><updated>2024-09-13T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C(CRUD)</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C(CRUD)/"><![CDATA[<p>了解如何在 Flask 应用中进行数据库的 CRUD（创建、读取、更新、删除）操作是开发动态 Web 应用的基础。以下是一个详细的教程，指导你如何使用 Flask 和 Flask-SQLAlchemy 实现这些操作。</p>

<h3 id="前提条件">前提条件</h3>

<p>假设你已经按照之前的教程完成了 Flask 项目和数据库的基本设置，包括 <code class="language-plaintext highlighter-rouge">app.py</code>、<code class="language-plaintext highlighter-rouge">config.py</code> 和 <code class="language-plaintext highlighter-rouge">models.py</code> 文件，并且已经创建了数据库。以下内容将在此基础上进行扩展。</p>

<h3 id="项目结构">项目结构</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>your_project/
│
├── app.py
├── config.py
├── models.py
├── requirements.txt
└── app.db
</code></pre></div></div>

<h3 id="安装必要的库">安装必要的库</h3>

<p>确保已安装 Flask 和 Flask-SQLAlchemy：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>Flask Flask-SQLAlchemy
</code></pre></div></div>

<h3 id="数据库模型-modelspy">数据库模型 (<code class="language-plaintext highlighter-rouge">models.py</code>)</h3>

<p>以用户（User）模型为例：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask_sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>
<span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">db</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nc">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nc">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="nc">String</span><span class="p">(</span><span class="mi">80</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nc">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="nc">String</span><span class="p">(</span><span class="mi">120</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">'</span><span class="s">&lt;User </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">&gt;</span><span class="sh">'</span>
</code></pre></div></div>

<h3 id="创建数据库">创建数据库</h3>

<p>在 Python 交互环境中运行以下命令以创建数据库和表：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">db</span>
<span class="n">db</span><span class="p">.</span><span class="nf">create_all</span><span class="p">()</span>
</code></pre></div></div>

<h3 id="crud-操作实现">CRUD 操作实现</h3>

<h4 id="1-创建create">1. 创建（Create）</h4>

<p>添加新用户的功能。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">jsonify</span>
<span class="kn">from</span> <span class="n">models</span> <span class="kn">import</span> <span class="n">User</span>
<span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">db</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/add_user</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">add_user</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span> <span class="ow">or</span> <span class="ow">not</span> <span class="sh">'</span><span class="s">username</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span> <span class="ow">or</span> <span class="ow">not</span> <span class="sh">'</span><span class="s">email</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">缺少用户名或电子邮件</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>

    <span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># 检查用户是否已存在
</span>    <span class="k">if</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">filter_by</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">).</span><span class="nf">first</span><span class="p">()</span> <span class="ow">or</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">filter_by</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">).</span><span class="nf">first</span><span class="p">():</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户已存在</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>

    <span class="n">new_user</span> <span class="o">=</span> <span class="nc">User</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_user</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">用户 </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s"> 添加成功!</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">201</span>
</code></pre></div></div>

<p><strong>测试方法：</strong></p>

<p>使用 Postman 或 cURL 发送 POST 请求：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> POST http://localhost:5000/add_user <span class="se">\</span>
     <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
     <span class="nt">-d</span> <span class="s1">'{"username":"john_doe", "email":"john@example.com"}'</span>
</code></pre></div></div>

<h4 id="2-读取read">2. 读取（Read）</h4>

<h5 id="21-获取所有用户">2.1 获取所有用户</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/get_users</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_users</span><span class="p">():</span>
    <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">all</span><span class="p">()</span>
    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
        <span class="n">user_data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">username</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span>
        <span class="p">}</span>
        <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">user_data</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">users</span><span class="sh">'</span><span class="p">:</span> <span class="n">output</span><span class="p">}),</span> <span class="mi">200</span>
</code></pre></div></div>

<h5 id="22-根据-id-获取单个用户">2.2 根据 ID 获取单个用户</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/get_user/&lt;int:user_id&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户未找到</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">user_data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">username</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user_data</span><span class="p">}),</span> <span class="mi">200</span>
</code></pre></div></div>

<p><strong>测试方法：</strong></p>

<ul>
  <li>
    <p>获取所有用户：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:5000/get_users
</code></pre></div>    </div>
  </li>
  <li>
    <p>获取特定用户（例如 ID 为 1）：</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:5000/get_user/1
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="3-更新update">3. 更新（Update）</h4>

<p>更新现有用户的信息。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/update_user/&lt;int:user_id&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">PUT</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">update_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户未找到</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="sh">'</span><span class="s">username</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">if</span> <span class="sh">'</span><span class="s">email</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">user</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">]</span>

    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">用户 </span><span class="si">{</span><span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> 更新成功!</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">200</span>
</code></pre></div></div>

<p><strong>测试方法：</strong></p>

<p>使用 Postman 或 cURL 发送 PUT 请求：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> PUT http://localhost:5000/update_user/1 <span class="se">\</span>
     <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
     <span class="nt">-d</span> <span class="s1">'{"username":"jane_doe", "email":"jane@example.com"}'</span>
</code></pre></div></div>

<h4 id="4-删除delete">4. 删除（Delete）</h4>

<p>删除指定用户。</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/delete_user/&lt;int:user_id&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">DELETE</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">delete_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户未找到</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">用户 </span><span class="si">{</span><span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> 删除成功!</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">200</span>
</code></pre></div></div>

<p><strong>测试方法：</strong></p>

<p>使用 Postman 或 cURL 发送 DELETE 请求：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> DELETE http://localhost:5000/delete_user/1
</code></pre></div></div>

<h3 id="完整的-apppy-示例">完整的 <code class="language-plaintext highlighter-rouge">app.py</code> 示例</h3>

<p>将所有 CRUD 路由整合到 <code class="language-plaintext highlighter-rouge">app.py</code> 中：</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">jsonify</span>
<span class="kn">from</span> <span class="n">flask_sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">from_object</span><span class="p">(</span><span class="sh">'</span><span class="s">config</span><span class="sh">'</span><span class="p">)</span>

<span class="n">db</span> <span class="o">=</span> <span class="nc">SQLAlchemy</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>

<span class="c1"># 导入模型
</span><span class="kn">from</span> <span class="n">models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="c1"># 创建用户
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/add_user</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">add_user</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">data</span> <span class="ow">or</span> <span class="ow">not</span> <span class="sh">'</span><span class="s">username</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span> <span class="ow">or</span> <span class="ow">not</span> <span class="sh">'</span><span class="s">email</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">缺少用户名或电子邮件</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>

    <span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># 检查用户是否已存在
</span>    <span class="k">if</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">filter_by</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">).</span><span class="nf">first</span><span class="p">()</span> <span class="ow">or</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">filter_by</span><span class="p">(</span><span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">).</span><span class="nf">first</span><span class="p">():</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户已存在</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">400</span>

    <span class="n">new_user</span> <span class="o">=</span> <span class="nc">User</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_user</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>

    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">用户 </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s"> 添加成功!</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">201</span>

<span class="c1"># 获取所有用户
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/get_users</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_users</span><span class="p">():</span>
    <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">all</span><span class="p">()</span>
    <span class="n">output</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">:</span>
        <span class="n">user_data</span> <span class="o">=</span> <span class="p">{</span>
            <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">username</span><span class="p">,</span>
            <span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span>
        <span class="p">}</span>
        <span class="n">output</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">user_data</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">users</span><span class="sh">'</span><span class="p">:</span> <span class="n">output</span><span class="p">}),</span> <span class="mi">200</span>

<span class="c1"># 获取单个用户
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/get_user/&lt;int:user_id&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户未找到</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">user_data</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">id</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">username</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">email</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">user</span><span class="sh">'</span><span class="p">:</span> <span class="n">user_data</span><span class="p">}),</span> <span class="mi">200</span>

<span class="c1"># 更新用户
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/update_user/&lt;int:user_id&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">PUT</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">update_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户未找到</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="nf">get_json</span><span class="p">()</span>
    <span class="k">if</span> <span class="sh">'</span><span class="s">username</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">if</span> <span class="sh">'</span><span class="s">email</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">data</span><span class="p">:</span>
        <span class="n">user</span><span class="p">.</span><span class="n">email</span> <span class="o">=</span> <span class="n">data</span><span class="p">[</span><span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">]</span>

    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">用户 </span><span class="si">{</span><span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> 更新成功!</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">200</span>

<span class="c1"># 删除用户
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/delete_user/&lt;int:user_id&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">DELETE</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">delete_user</span><span class="p">(</span><span class="n">user_id</span><span class="p">):</span>
    <span class="n">user</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">user_id</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">user</span><span class="p">:</span>
        <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">用户未找到</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">404</span>

    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">delete</span><span class="p">(</span><span class="n">user</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">'</span><span class="s">message</span><span class="sh">'</span><span class="p">:</span> <span class="sa">f</span><span class="sh">'</span><span class="s">用户 </span><span class="si">{</span><span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="si">}</span><span class="s"> 删除成功!</span><span class="sh">'</span><span class="p">}),</span> <span class="mi">200</span>

<span class="c1"># 首页
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">欢迎使用 Flask 数据库 CRUD 教程!</span><span class="sh">"</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="运行应用">运行应用</h3>

<p>启动 Flask 应用：</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python app.py
</code></pre></div></div>

<p>应用将在默认的 <code class="language-plaintext highlighter-rouge">http://localhost:5000</code> 运行。</p>

<h3 id="测试-crud-操作">测试 CRUD 操作</h3>

<p>你可以使用 <strong>Postman</strong> 或 <strong>cURL</strong> 来测试各个 API 路由。</p>

<h4 id="示例操作">示例操作</h4>

<ol>
  <li>
    <p><strong>创建用户</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> POST http://localhost:5000/add_user <span class="se">\</span>
     <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
     <span class="nt">-d</span> <span class="s1">'{"username":"alice", "email":"alice@example.com"}'</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>读取所有用户</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:5000/get_users
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>读取单个用户</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://localhost:5000/get_user/1
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>更新用户</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> PUT http://localhost:5000/update_user/1 <span class="se">\</span>
     <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="se">\</span>
     <span class="nt">-d</span> <span class="s1">'{"username":"alice_updated", "email":"alice_new@example.com"}'</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><strong>删除用户</strong></p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> DELETE http://localhost:5000/delete_user/1
</code></pre></div>    </div>
  </li>
</ol>

<h3 id="使用-postman-进行测试">使用 Postman 进行测试</h3>

<ol>
  <li>
    <p><strong>安装 Postman</strong>：<a href="https://www.postman.com/downloads/">下载地址</a></p>
  </li>
  <li>
    <p><strong>创建请求</strong></p>

    <ul>
      <li><strong>POST</strong> <code class="language-plaintext highlighter-rouge">/add_user</code>：在 Body 选择 <code class="language-plaintext highlighter-rouge">raw</code> 和 <code class="language-plaintext highlighter-rouge">JSON</code>，输入用户数据。</li>
      <li><strong>GET</strong> <code class="language-plaintext highlighter-rouge">/get_users</code> 和 <code class="language-plaintext highlighter-rouge">/get_user/&lt;id&gt;</code>：直接发送 GET 请求。</li>
      <li><strong>PUT</strong> <code class="language-plaintext highlighter-rouge">/update_user/&lt;id&gt;</code>：在 Body 选择 <code class="language-plaintext highlighter-rouge">raw</code> 和 <code class="language-plaintext highlighter-rouge">JSON</code>，输入要更新的数据。</li>
      <li><strong>DELETE</strong> <code class="language-plaintext highlighter-rouge">/delete_user/&lt;id&gt;</code>：发送 DELETE 请求。</li>
    </ul>
  </li>
</ol>

<h3 id="总结">总结</h3>

<p>通过以上步骤，你已经在 Flask 应用中实现了基本的 CRUD 操作。这些操作涵盖了创建、读取、更新和删除数据库中的记录。你可以根据需求扩展这些功能，例如添加用户认证、使用更复杂的查询或集成其他数据库（如 MySQL、PostgreSQL 等）。</p>

<h3 id="进一步学习">进一步学习</h3>

<ul>
  <li><strong>验证和错误处理</strong>：使用 Flask-WTF 或 Marshmallow 进行数据验证。</li>
  <li><strong>分页和过滤</strong>：为读取操作添加分页和过滤功能。</li>
  <li><strong>用户认证</strong>：集成 Flask-Login 或 Flask-JWT 实现用户认证和授权。</li>
  <li><strong>前端集成</strong>：使用前端框架（如 React、Vue）与 Flask API 进行交互。</li>
</ul>

<p>如果你在实现过程中遇到任何问题，欢迎随时提问！</p>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[了解如何在 Flask 应用中进行数据库的 CRUD（创建、读取、更新、删除）操作是开发动态 Web 应用的基础。以下是一个详细的教程，指导你如何使用 Flask 和 Flask-SQLAlchemy 实现这些操作。]]></summary></entry><entry><title type="html">challenge-09/30-flask 资料库操作（CRUD)</title><link href="http://localhost:4000/python/flask/challenge/flask_%E8%B5%84%E6%96%99%E5%BA%93%E6%93%8D%E4%BD%9C(CRUD)/" rel="alternate" type="text/html" title="challenge-09/30-flask 资料库操作（CRUD)" /><published>2024-09-13T11:24:29+08:00</published><updated>2024-09-13T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_%E8%B5%84%E6%96%99%E5%BA%93%E6%93%8D%E4%BD%9C(CRUD)</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_%E8%B5%84%E6%96%99%E5%BA%93%E6%93%8D%E4%BD%9C(CRUD)/"><![CDATA[<h3 id="设定数据与代码做结合">设定数据与代码做结合</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">jsonify</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">from</span> <span class="n">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="c1"># 连接到 MongoDB
</span><span class="n">client</span> <span class="o">=</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="sh">"</span><span class="s">mongodb://localhost:27017/</span><span class="sh">"</span><span class="p">)</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="sh">"</span><span class="s">recipe</span><span class="sh">"</span><span class="p">]</span>  <span class="c1"># 创建/选择数据库
</span><span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="sh">"</span><span class="s">info</span><span class="sh">"</span><span class="p">]</span>  <span class="c1"># 创建/选择集合
</span></code></pre></div></div>

<h3 id="主页">主页</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 主页路由
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">home</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Welcome to the Flask MongoDB app!</span><span class="sh">"</span>
</code></pre></div></div>

<h3 id="添加数据">添加数据</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 插入数据到 MongoDB
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/add</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="c1"># curl -X POST http://127.0.0.1:5000/add -H "Content-Type: application/json" -d '{"name": "Alice", "age": 30}'
</span><span class="k">def</span> <span class="nf">add_data</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">json</span>
    <span class="n">collection</span><span class="p">.</span><span class="nf">insert_one</span><span class="p">(</span><span class="n">data</span><span class="p">)</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Data inserted successfully!</span><span class="sh">"</span><span class="p">}),</span> <span class="mi">201</span>
</code></pre></div></div>

<h3 id="资料库">资料库</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 获取数据
</span><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/data</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_data</span><span class="p">():</span>
    <span class="n">data</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">collection</span><span class="p">.</span><span class="nf">find</span><span class="p">({},</span> <span class="p">{</span><span class="sh">"</span><span class="s">_id</span><span class="sh">"</span><span class="p">:</span> <span class="mi">0</span><span class="p">}))</span>  <span class="c1"># 不返回 _id 字段
</span>    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">(</span><span class="n">data</span><span class="p">),</span> <span class="mi">200</span>
</code></pre></div></div>

<h3 id="更新数据">更新数据</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/update/&lt;name&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">PUT</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">update_data</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">json</span>
    <span class="n">collection</span><span class="p">.</span><span class="nf">update_one</span><span class="p">({</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">},</span> <span class="p">{</span><span class="sh">"</span><span class="s">$set</span><span class="sh">"</span><span class="p">:</span> <span class="n">data</span><span class="p">})</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Data updated successfully!</span><span class="sh">"</span><span class="p">}),</span> <span class="mi">200</span>
</code></pre></div></div>

<h3 id="删除数据">删除数据</h3>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/delete/&lt;name&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">DELETE</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">delete_data</span><span class="p">(</span><span class="n">name</span><span class="p">):</span>
    <span class="n">collection</span><span class="p">.</span><span class="nf">delete_one</span><span class="p">({</span><span class="sh">"</span><span class="s">name</span><span class="sh">"</span><span class="p">:</span> <span class="n">name</span><span class="p">})</span>
    <span class="k">return</span> <span class="nf">jsonify</span><span class="p">({</span><span class="sh">"</span><span class="s">message</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Data deleted successfully!</span><span class="sh">"</span><span class="p">}),</span> <span class="mi">200</span>
</code></pre></div></div>

<h3 id="发送数据-curl">发送数据 curl</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> POST http://127.0.0.1:5000/add <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> <span class="s1">'{"name": "Alice", "age": 30}'</span>

</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-X</span> POST http://127.0.0.1:5000/add <span class="nt">-H</span> <span class="s2">"Content-Type: application/json"</span> <span class="nt">-d</span> @data.json
</code></pre></div></div>

<h3 id="检查data内容">检查data内容</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl http://127.0.0.1:5000/data
</code></pre></div></div>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[设定数据与代码做结合]]></summary></entry><entry><title type="html">books-财务自由笔记</title><link href="http://localhost:4000/review/financial/review026/" rel="alternate" type="text/html" title="books-财务自由笔记" /><published>2024-09-13T11:24:29+08:00</published><updated>2024-09-13T11:24:29+08:00</updated><id>http://localhost:4000/review/financial/review026</id><content type="html" xml:base="http://localhost:4000/review/financial/review026/"><![CDATA[<h3 id="阅读书本前">阅读书本前</h3>

<p>就看看</p>

<h3 id="书评">书评</h3>

<h4 id="学会花钱">学会花钱</h4>

<p>传统-少花多存</p>

<p>28(年龄)-20(公式) = 8% bond 92% stock</p>

<p>“尽可能地规避主动式管理基金，千万不要试图打败市场。应该把自己的钱投资于某些指数型基金。”1990年诺贝尔经济学奖得主、斯坦福大学教授威廉·夏普如是建议身家百万的谷歌新贵们。</p>

<p>再平衡策略 1年</p>

<h3 id="评后感">评后感</h3>

<p>买ETF就好,要学会建立金融财报平台</p>]]></content><author><name></name></author><category term="review" /><category term="financial" /><summary type="html"><![CDATA[阅读书本前 就看看 书评 学会花钱 传统-少花多存 28(年龄)-20(公式) = 8% bond 92% stock “尽可能地规避主动式管理基金，千万不要试图打败市场。应该把自己的钱投资于某些指数型基金。”1990年诺贝尔经济学奖得主、斯坦福大学教授威廉·夏普如是建议身家百万的谷歌新贵们。 再平衡策略 1年 评后感 买ETF就好,要学会建立金融财报平台]]></summary></entry><entry><title type="html">challenge-08/30-Flask-SQLAlchemy 安装与设置</title><link href="http://localhost:4000/python/flask/challenge/flask_SQLAlchemy_%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE/" rel="alternate" type="text/html" title="challenge-08/30-Flask-SQLAlchemy 安装与设置" /><published>2024-09-12T11:24:29+08:00</published><updated>2024-09-12T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/challenge/flask_SQLAlchemy_%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE</id><content type="html" xml:base="http://localhost:4000/python/flask/challenge/flask_SQLAlchemy_%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE/"><![CDATA[<p>要在 Flask 中建立资料库并进行基本的数据库操作，你可以使用 Flask-SQLAlchemy 作为 ORM（对象关系映射），这使得操作数据库变得更加直观和简便。以下是一个基本的 Flask 项目设置和数据库操作的教程：</p>

<h3 id="安装-flask-和-flask-sqlalchemy">安装 Flask 和 Flask-SQLAlchemy</h3>
<p>首先，你需要安装 Flask 和 Flask-SQLAlchemy。</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>Flask Flask-SQLAlchemy
</code></pre></div></div>

<h3 id="第一步建立-flask-项目">第一步：建立 Flask 项目</h3>

<ol>
  <li>创建一个新的项目文件夹，并创建以下文件：
    <ul>
      <li><code class="language-plaintext highlighter-rouge">app.py</code>：主程序文件</li>
      <li><code class="language-plaintext highlighter-rouge">config.py</code>：配置文件</li>
      <li><code class="language-plaintext highlighter-rouge">models.py</code>：数据库模型</li>
    </ul>
  </li>
  <li>创建 <code class="language-plaintext highlighter-rouge">app.py</code> 文件，内容如下：</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span>
<span class="kn">from</span> <span class="n">flask_sqlalchemy</span> <span class="kn">import</span> <span class="n">SQLAlchemy</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">app</span><span class="p">.</span><span class="n">config</span><span class="p">.</span><span class="nf">from_object</span><span class="p">(</span><span class="sh">'</span><span class="s">config</span><span class="sh">'</span><span class="p">)</span>

<span class="n">db</span> <span class="o">=</span> <span class="nc">SQLAlchemy</span><span class="p">(</span><span class="n">app</span><span class="p">)</span>

<span class="c1"># 导入模型
</span><span class="kn">from</span> <span class="n">models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s">Welcome to the Flask database tutorial</span><span class="sh">"</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="第二步设置数据库配置">第二步：设置数据库配置</h3>

<ol>
  <li>在项目根目录下创建 <code class="language-plaintext highlighter-rouge">config.py</code> 文件，用于存储数据库连接配置。</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>

<span class="c1"># 设置数据库连接 URI，使用 SQLite 数据库
</span><span class="n">basedir</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">abspath</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">dirname</span><span class="p">(</span><span class="n">__file__</span><span class="p">))</span>

<span class="n">SQLALCHEMY_DATABASE_URI</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sqlite:///</span><span class="sh">'</span> <span class="o">+</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">basedir</span><span class="p">,</span> <span class="sh">'</span><span class="s">app.db</span><span class="sh">'</span><span class="p">)</span>
<span class="n">SQLALCHEMY_TRACK_MODIFICATIONS</span> <span class="o">=</span> <span class="bp">False</span>
</code></pre></div></div>

<h3 id="第三步定义数据库模型">第三步：定义数据库模型</h3>

<ol>
  <li>在 <code class="language-plaintext highlighter-rouge">models.py</code> 文件中定义数据库模型。以用户（User）模型为例：</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">app</span> <span class="kn">import</span> <span class="n">db</span>

<span class="k">class</span> <span class="nc">User</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="nb">id</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nc">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="n">Integer</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nc">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="nc">String</span><span class="p">(</span><span class="mi">80</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">db</span><span class="p">.</span><span class="nc">Column</span><span class="p">(</span><span class="n">db</span><span class="p">.</span><span class="nc">String</span><span class="p">(</span><span class="mi">120</span><span class="p">),</span> <span class="n">unique</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">nullable</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__repr__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sa">f</span><span class="sh">'</span><span class="s">&lt;User </span><span class="si">{</span><span class="n">self</span><span class="p">.</span><span class="n">username</span><span class="si">}</span><span class="s">&gt;</span><span class="sh">'</span>
</code></pre></div></div>

<h3 id="第四步创建数据库">第四步：创建数据库</h3>

<ol>
  <li>在命令行中运行以下命令来创建数据库：</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from app import db
db.create_all<span class="o">()</span>
</code></pre></div></div>

<p>这将会在你的项目文件夹中创建 <code class="language-plaintext highlighter-rouge">app.db</code> 文件，它是你的 SQLite 数据库。</p>

<h3 id="第五步执行基本的数据库操作">第五步：执行基本的数据库操作</h3>

<ol>
  <li>在 <code class="language-plaintext highlighter-rouge">app.py</code> 文件中添加一些视图函数来执行基本的数据库操作，例如添加、查询和删除用户。</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">from</span> <span class="n">models</span> <span class="kn">import</span> <span class="n">User</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/add_user</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">POST</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">add_user</span><span class="p">():</span>
    <span class="n">username</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">username</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">email</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">form</span><span class="p">[</span><span class="sh">'</span><span class="s">email</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">new_user</span> <span class="o">=</span> <span class="nc">User</span><span class="p">(</span><span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">email</span><span class="o">=</span><span class="n">email</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="n">new_user</span><span class="p">)</span>
    <span class="n">db</span><span class="p">.</span><span class="n">session</span><span class="p">.</span><span class="nf">commit</span><span class="p">()</span>
    <span class="k">return</span> <span class="sa">f</span><span class="sh">"</span><span class="s">User </span><span class="si">{</span><span class="n">username</span><span class="si">}</span><span class="s"> added successfully!</span><span class="sh">"</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/get_users</span><span class="sh">'</span><span class="p">,</span> <span class="n">methods</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">GET</span><span class="sh">'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_users</span><span class="p">():</span>
    <span class="n">users</span> <span class="o">=</span> <span class="n">User</span><span class="p">.</span><span class="n">query</span><span class="p">.</span><span class="nf">all</span><span class="p">()</span>
    <span class="k">return</span> <span class="p">{</span><span class="n">user</span><span class="p">.</span><span class="nb">id</span><span class="p">:</span> <span class="n">user</span><span class="p">.</span><span class="n">username</span> <span class="k">for</span> <span class="n">user</span> <span class="ow">in</span> <span class="n">users</span><span class="p">}</span>
</code></pre></div></div>

<h3 id="第六步运行应用">第六步：运行应用</h3>

<ol>
  <li>启动 Flask 应用：</li>
</ol>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python app.py
</code></pre></div></div>

<ol>
  <li>使用 Postman 或 cURL 测试 <code class="language-plaintext highlighter-rouge">POST /add_user</code> 和 <code class="language-plaintext highlighter-rouge">GET /get_users</code> 路由来添加和查看用户。</li>
</ol>

<h3 id="总结">总结</h3>

<p>你已经学会了如何在 Flask 中设置数据库，并进行基本的操作。通过使用 Flask-SQLAlchemy，你可以轻松地对数据库进行管理，并将 Flask 与各种数据库相集成，如 MySQL、PostgreSQL 或 SQLite。</p>

<p>如果你需要更深入的教程或代码示例，请告诉我！</p>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="challenge" /><summary type="html"><![CDATA[要在 Flask 中建立资料库并进行基本的数据库操作，你可以使用 Flask-SQLAlchemy 作为 ORM（对象关系映射），这使得操作数据库变得更加直观和简便。以下是一个基本的 Flask 项目设置和数据库操作的教程：]]></summary></entry><entry><title type="html">challenge-07/30-flask mongodb</title><link href="http://localhost:4000/python/flask/mongodb/challenge/flask_mongodb/" rel="alternate" type="text/html" title="challenge-07/30-flask mongodb" /><published>2024-09-12T11:24:29+08:00</published><updated>2024-09-12T11:24:29+08:00</updated><id>http://localhost:4000/python/flask/mongodb/challenge/flask_mongodb</id><content type="html" xml:base="http://localhost:4000/python/flask/mongodb/challenge/flask_mongodb/"><![CDATA[<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="nt">&lt;html</span> <span class="na">lang=</span><span class="s">"en"</span><span class="nt">&gt;</span>
<span class="nt">&lt;head&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">"UTF-8"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">"viewport"</span> <span class="na">content=</span><span class="s">"width=device-width, initial-scale=1.0"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">""</span><span class="nt">&gt;</span>
    <span class="nt">&lt;title&gt;</span>geo<span class="nt">&lt;/title&gt;</span>
<span class="nt">&lt;/head&gt;</span>
<span class="nt">&lt;body&gt;</span>
    <span class="nt">&lt;h1&gt;</span>Hello, !<span class="nt">&lt;/h1&gt;</span>
    <span class="c">&lt;!-- &lt;p&gt;You are  years old.&lt;/p&gt; --&gt;</span>
    <span class="nt">&lt;p&gt;</span> <span class="nt">&lt;article</span> <span class="na">class=</span><span class="s">"post h-entry"</span> <span class="na">itemscope</span> <span class="na">itemtype=</span><span class="s">"http://schema.org/BlogPosting"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;header</span> <span class="na">class=</span><span class="s">"post-header"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;h1</span> <span class="na">class=</span><span class="s">"post-title p-name"</span> <span class="na">itemprop=</span><span class="s">"name headline"</span><span class="nt">&gt;</span>challenge-08/30-Flask-SQLAlchemy 安装与设置<span class="nt">&lt;/h1&gt;</span>
    <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">"post-meta"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;time</span> <span class="na">class=</span><span class="s">"dt-published"</span> <span class="na">datetime=</span><span class="s">"2024-09-12T11:24:29+08:00"</span> <span class="na">itemprop=</span><span class="s">"datePublished"</span><span class="nt">&gt;</span>Sep 12, 2024
      <span class="nt">&lt;/time&gt;&lt;/p&gt;</span>
  <span class="nt">&lt;/header&gt;</span>

  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"post-content e-content"</span> <span class="na">itemprop=</span><span class="s">"articleBody"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;p&gt;</span>要在 Flask 中建立资料库并进行基本的数据库操作，你可以使用 Flask-SQLAlchemy 作为 ORM（对象关系映射），这使得操作数据库变得更加直观和简便。以下是一个基本的 Flask 项目设置和数据库操作的教程：<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"安装-flask-和-flask-sqlalchemy"</span><span class="nt">&gt;</span>安装 Flask 和 Flask-SQLAlchemy<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;p&gt;</span>首先，你需要安装 Flask 和 Flask-SQLAlchemy。<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-bash highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;</span>pip <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nb"</span><span class="nt">&gt;</span>install <span class="nt">&lt;/span&gt;</span>Flask Flask-SQLAlchemy
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"第一步建立-flask-项目"</span><span class="nt">&gt;</span>第一步：建立 Flask 项目<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>创建一个新的项目文件夹，并创建以下文件：
    <span class="nt">&lt;ul&gt;</span>
      <span class="nt">&lt;li&gt;&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>app.py<span class="nt">&lt;/code&gt;</span>：主程序文件<span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>config.py<span class="nt">&lt;/code&gt;</span>：配置文件<span class="nt">&lt;/li&gt;</span>
      <span class="nt">&lt;li&gt;&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>models.py<span class="nt">&lt;/code&gt;</span>：数据库模型<span class="nt">&lt;/li&gt;</span>
    <span class="nt">&lt;/ul&gt;</span>
  <span class="nt">&lt;/li&gt;</span>
  <span class="nt">&lt;li&gt;</span>创建 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>app.py<span class="nt">&lt;/code&gt;</span> 文件，内容如下：<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-python highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>from<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>flask<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>Flask<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>from<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>flask_sqlalchemy<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>SQLAlchemy<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>app<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>Flask<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>__name__<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>app<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>config<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>from_object<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>config<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>SQLAlchemy<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>app<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"c1"</span><span class="nt">&gt;</span># 导入模型
<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>from<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>models<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>User<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nd"</span><span class="nt">&gt;</span>@app.route<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>/<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>def<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>index<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>():<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>return<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>"<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>Welcome to the Flask database tutorial<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>"<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>if<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>__name__<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>==<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>__main__<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>:<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>app<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>run<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>debug<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>True<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"第二步设置数据库配置"</span><span class="nt">&gt;</span>第二步：设置数据库配置<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>在项目根目录下创建 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>config.py<span class="nt">&lt;/code&gt;</span> 文件，用于存储数据库连接配置。<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-python highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>os<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"c1"</span><span class="nt">&gt;</span># 设置数据库连接 URI，使用 SQLite 数据库
<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>basedir<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>os<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>path<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>abspath<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>os<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>path<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>dirname<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>__file__<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>))<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>SQLALCHEMY_DATABASE_URI<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>sqlite:///<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>+<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>os<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>path<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>join<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>basedir<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>app.db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>SQLALCHEMY_TRACK_MODIFICATIONS<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>False<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"第三步定义数据库模型"</span><span class="nt">&gt;</span>第三步：定义数据库模型<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>在 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>models.py<span class="nt">&lt;/code&gt;</span> 文件中定义数据库模型。以用户（User）模型为例：<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-python highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>from<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>app<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>class<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>User<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>Model<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>):<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nb"</span><span class="nt">&gt;</span>id<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>Column<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>Integer<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>primary_key<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>True<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>Column<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>String<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"mi"</span><span class="nt">&gt;</span>80<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>),<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>unique<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>True<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>nullable<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>False<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>email<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>Column<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>String<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"mi"</span><span class="nt">&gt;</span>120<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>),<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>unique<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>True<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>nullable<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"bp"</span><span class="nt">&gt;</span>False<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>

    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>def<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>__repr__<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>self<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>):<span class="nt">&lt;/span&gt;</span>
        <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>return<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"sa"</span><span class="nt">&gt;</span>f<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span><span class="ni">&amp;lt;</span>User <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"si"</span><span class="nt">&gt;</span>{<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>self<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"si"</span><span class="nt">&gt;</span>}<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span><span class="ni">&amp;gt;</span><span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"第四步创建数据库"</span><span class="nt">&gt;</span>第四步：创建数据库<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>在命令行中运行以下命令来创建数据库：<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-bash highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;</span>from app import db
db.create_all<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>()<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;p&gt;</span>这将会在你的项目文件夹中创建 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>app.db<span class="nt">&lt;/code&gt;</span> 文件，它是你的 SQLite 数据库。<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"第五步执行基本的数据库操作"</span><span class="nt">&gt;</span>第五步：执行基本的数据库操作<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>在 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>app.py<span class="nt">&lt;/code&gt;</span> 文件中添加一些视图函数来执行基本的数据库操作，例如添加、查询和删除用户。<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-python highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>from<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>flask<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>Flask<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>request<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>from<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>models<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"kn"</span><span class="nt">&gt;</span>import<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>User<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nd"</span><span class="nt">&gt;</span>@app.route<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>/add_user<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>methods<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>[<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>POST<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>])<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>def<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>add_user<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>():<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>request<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>form<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>[<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>]<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>email<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>request<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>form<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>[<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>email<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>]<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>new_user<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nc"</span><span class="nt">&gt;</span>User<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>email<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>email<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>session<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>add<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>new_user<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>)<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>db<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>session<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>commit<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>()<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>return<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"sa"</span><span class="nt">&gt;</span>f<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>"<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>User <span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"si"</span><span class="nt">&gt;</span>{<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"si"</span><span class="nt">&gt;</span>}<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span> added successfully!<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>"<span class="nt">&lt;/span&gt;</span>

<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nd"</span><span class="nt">&gt;</span>@app.route<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>(<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>/get_users<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>,<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>methods<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>[<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"s"</span><span class="nt">&gt;</span>GET<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"sh"</span><span class="nt">&gt;</span>'<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>])<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>def<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>get_users<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>():<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>users<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"o"</span><span class="nt">&gt;</span>=<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>User<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>query<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nf"</span><span class="nt">&gt;</span>all<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>()<span class="nt">&lt;/span&gt;</span>
    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>return<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>{<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>user<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"nb"</span><span class="nt">&gt;</span>id<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>:<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>user<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>.<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>username<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"k"</span><span class="nt">&gt;</span>for<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>user<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"ow"</span><span class="nt">&gt;</span>in<span class="nt">&lt;/span&gt;</span> <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">"n"</span><span class="nt">&gt;</span>users<span class="nt">&lt;/span&gt;&lt;span</span> <span class="na">class=</span><span class="s">"p"</span><span class="nt">&gt;</span>}<span class="nt">&lt;/span&gt;</span>
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"第六步运行应用"</span><span class="nt">&gt;</span>第六步：运行应用<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>启动 Flask 应用：<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"language-bash highlighter-rouge"</span><span class="nt">&gt;&lt;div</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;pre</span> <span class="na">class=</span><span class="s">"highlight"</span><span class="nt">&gt;&lt;code&gt;</span>python app.py
<span class="nt">&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</span>

<span class="nt">&lt;ol&gt;</span>
  <span class="nt">&lt;li&gt;</span>使用 Postman 或 cURL 测试 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>POST /add_user<span class="nt">&lt;/code&gt;</span> 和 <span class="nt">&lt;code</span> <span class="na">class=</span><span class="s">"language-plaintext highlighter-rouge"</span><span class="nt">&gt;</span>GET /get_users<span class="nt">&lt;/code&gt;</span> 路由来添加和查看用户。<span class="nt">&lt;/li&gt;</span>
<span class="nt">&lt;/ol&gt;</span>

<span class="nt">&lt;h3</span> <span class="na">id=</span><span class="s">"总结"</span><span class="nt">&gt;</span>总结<span class="nt">&lt;/h3&gt;</span>

<span class="nt">&lt;p&gt;</span>你已经学会了如何在 Flask 中设置数据库，并进行基本的操作。通过使用 Flask-SQLAlchemy，你可以轻松地对数据库进行管理，并将 Flask 与各种数据库相集成，如 MySQL、PostgreSQL 或 SQLite。<span class="nt">&lt;/p&gt;</span>

<span class="nt">&lt;p&gt;</span>如果你需要更深入的教程或代码示例，请告诉我！<span class="nt">&lt;/p&gt;</span>

  <span class="nt">&lt;/div&gt;&lt;a</span> <span class="na">class=</span><span class="s">"u-url"</span> <span class="na">href=</span><span class="s">"/python/flask/challenge/flask_SQLAlchemy_%E5%AE%89%E8%A3%85%E4%B8%8E%E8%AE%BE%E7%BD%AE/"</span> <span class="na">hidden</span><span class="nt">&gt;&lt;/a&gt;</span>
<span class="nt">&lt;/article&gt;</span>
<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;/body&gt;</span>
<span class="nt">&lt;/html&gt;</span>
</code></pre></div></div>

<div class="language-py highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span><span class="p">,</span> <span class="n">render_template</span>
<span class="kn">import</span> <span class="n">smtplib</span>
<span class="kn">from</span> <span class="n">email.mime.text</span> <span class="kn">import</span> <span class="n">MIMEText</span>
<span class="kn">from</span> <span class="n">pymongo</span> <span class="kn">import</span> <span class="n">MongoClient</span>

<span class="n">client</span> <span class="o">=</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="sh">'</span><span class="s">mongodb://localhost:27017/</span><span class="sh">'</span><span class="p">)</span>
<span class="n">db</span> <span class="o">=</span> <span class="n">client</span><span class="p">[</span><span class="sh">'</span><span class="s">recipe</span><span class="sh">'</span><span class="p">]</span>
<span class="n">collection</span> <span class="o">=</span> <span class="n">db</span><span class="p">[</span><span class="sh">'</span><span class="s">info</span><span class="sh">'</span><span class="p">]</span>

<span class="n">r</span> <span class="o">=</span> <span class="p">[</span> <span class="n">recipe</span> <span class="k">for</span> <span class="n">recipe</span> <span class="ow">in</span> <span class="n">collection</span><span class="p">.</span><span class="nf">find</span><span class="p">()</span> <span class="p">]</span>

<span class="n">app</span> <span class="o">=</span> <span class="nc">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>

<span class="nd">@app.route</span><span class="p">(</span><span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">index</span><span class="p">():</span>
    <span class="k">return</span> <span class="nf">render_template</span><span class="p">(</span><span class="sh">'</span><span class="s">index.html</span><span class="sh">'</span><span class="p">,</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">geo</span><span class="sh">'</span><span class="p">,</span><span class="n">content</span><span class="o">=</span><span class="n">r</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>

    <span class="n">app</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">debug</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="python" /><category term="flask" /><category term="mongodb" /><category term="challenge" /><summary type="html"><![CDATA[&lt;!DOCTYPE html&gt; &lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;link rel="stylesheet" href=""&gt; &lt;title&gt;geo&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt;Hello, !&lt;/h1&gt; &lt;!-- &lt;p&gt;You are years old.&lt;/p&gt; --&gt; &lt;p&gt; &lt;/p&gt; &lt;/body&gt; &lt;/html&gt;]]></summary></entry></feed>